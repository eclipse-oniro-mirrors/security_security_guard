# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/security_guard/security_guard.gni")
import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")

idl_gen_interface("data_collect_manager_service_interface") {
  sources = [ "DataCollectManagerIdl.idl" ]
  log_domainid = "0xD002F07"
  log_tag = "DATA_COLLECT_MANAGER"
  subsystem_name = "security"
  part_name = "security_guard"
}

config("data_collect_manager_service_public_config") {
  include_dirs = [
    "${target_gen_dir}",
    "${sg_root_dir}/interfaces/inner_api/common/include",
    "${sg_root_dir}/interfaces/inner_api/collect/include",
    "${sg_root_dir}/services/data_collect/sa/include",
  ]
}

ohos_source_set("data_collect_manager_idl_sa_stub") {
  output_values = get_target_outputs(":data_collect_manager_service_interface")
  sources = []
  sources += filter_include(output_values, [ "*idl_stub.cpp" ])
  public_configs = [ ":data_collect_manager_service_public_config" ]
  deps = [ ":data_collect_manager_service_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  subsystem_name = "security"
  part_name = "security_guard"
}

ohos_source_set("data_collect_manager_idl_sa_proxy") {
  output_values = get_target_outputs(":data_collect_manager_service_interface")
  sources = []
  sources += filter_include(output_values, [ "*idl_proxy.cpp" ])
  public_configs = [ ":data_collect_manager_service_public_config" ]
  deps = [ ":data_collect_manager_service_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"

  subsystem_name = "security"
  part_name = "security_guard"
}
