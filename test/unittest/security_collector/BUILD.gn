# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/security_guard/security_guard.gni")
import("//build/test.gni")

ohos_unittest("security_collector_test") {
  install_enable = true
  part_name = "security_guard"
  subsystem_name = "security"
  module_out_path = "${part_name}/${part_name}"

  include_dirs = [
    "include",
    "${sg_root_dir}/frameworks/common/json/include",
    "${sg_root_dir}/frameworks/common/constants/include",
    "${sg_root_dir}/interfaces/inner_api/collector/include",
    "${sg_root_dir}/services/security_collector/include",
    "${sg_root_dir}/test/unittest/security_collector/interface_test/include",
  ]

  sources = [ "${sg_root_dir}/test/unittest/security_collector/interface_test/src/collector_interface_test.cpp" ]

  deps = [
    "${sg_root_dir}/interfaces/inner_api/collector:libsg_collector_sdk",
    "${sg_root_dir}/services/security_collector:security_collector_service",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock",
    "hilog:libhilog",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
  ]
}

ohos_unittest("SecurityCollectorTest") {
  install_enable = true
  part_name = "security_guard"
  subsystem_name = "security"
  module_out_path = part_name + "/" + part_name

  include_dirs = [
    "include",
    "${sg_root_dir}/services/bigdata/include",
    "${sg_root_dir}/frameworks/common/constants/include",
    "${sg_root_dir}/frameworks/common/interfaces",
    "${sg_root_dir}/frameworks/common/json/include",
    "${sg_root_dir}/frameworks/common/task_handler/include",
    "${sg_root_dir}/frameworks/common/database/include",
    "${sg_root_dir}/frameworks/common/log/include",
    "${sg_root_dir}/frameworks/common/utils/include",
    "${sg_root_dir}/test/unittest/mock/accesstoken",
    "${sg_root_dir}/test/unittest/mock/account_manager",
    "${sg_root_dir}/test/unittest/mock/collector_manager",
    "${sg_root_dir}/test/unittest/mock/config_manager",
    "${sg_root_dir}/test/unittest/mock/data_collect",
    "${sg_root_dir}/test/unittest/mock/data_collection",
    "${sg_root_dir}/test/unittest/mock/database_manager",
    "${sg_root_dir}/test/unittest/mock/device_manager",
    "${sg_root_dir}/test/unittest/mock/preferences",
    "${sg_root_dir}/test/unittest/mock/preferences_wrapper",
    "${sg_root_dir}/test/unittest/mock/rdb",
  ]

  sources = [
    "${sg_root_dir}/frameworks/common/utils/src/security_guard_utils.cpp",
    "${sg_root_dir}/services/security_collector/src/lib_loader.cpp",
    "${sg_root_dir}/services/security_collector/src/security_collector_manager_callback_proxy.cpp",
    "${sg_root_dir}/services/security_collector/src/security_collector_manager_service.cpp",
    "${sg_root_dir}/services/security_collector/src/security_collector_manager_stub.cpp",
    "src/security_collector_test.cpp",
  ]

  deps = [
    "${sg_root_dir}/frameworks/common/task_handler:sg_task_stamp",
    "${sg_root_dir}/services/bigdata:sg_bigdata_stamp",
  ]

  external_deps = [
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hisysevent:libhisyseventmanager",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("SecurityCollectorRunManagerTest") {
  install_enable = true
  part_name = "security_guard"
  subsystem_name = "security"
  module_out_path = part_name + "/" + part_name

  include_dirs = [
    "include",
    "${sg_root_dir}/services/bigdata/include",
    "${sg_root_dir}/frameworks/common/constants/include",
    "${sg_root_dir}/frameworks/common/interfaces",
    "${sg_root_dir}/frameworks/common/json/include",
    "${sg_root_dir}/frameworks/common/task_handler/include",
    "${sg_root_dir}/frameworks/common/database/include",
    "${sg_root_dir}/frameworks/common/log/include",
    "${sg_root_dir}/frameworks/common/utils/include",
    "${sg_root_dir}/test/unittest/mock/accesstoken",
    "${sg_root_dir}/test/unittest/mock/account_manager",
    "${sg_root_dir}/test/unittest/mock/collector_manager",
    "${sg_root_dir}/test/unittest/mock/config_manager",
    "${sg_root_dir}/test/unittest/mock/data_collect",
    "${sg_root_dir}/test/unittest/mock/data_collection",
    "${sg_root_dir}/test/unittest/mock/database_manager",
    "${sg_root_dir}/test/unittest/mock/device_manager",
    "${sg_root_dir}/test/unittest/mock/preferences",
    "${sg_root_dir}/test/unittest/mock/preferences_wrapper",
    "${sg_root_dir}/test/unittest/mock/rdb",
  ]

  sources = [
    "${sg_root_dir}/frameworks/common/utils/src/security_guard_utils.cpp",
    "src/security_collector_test.cpp",
  ]

  deps = [
    "${sg_root_dir}/frameworks/common/task_handler:sg_task_stamp",
    "${sg_root_dir}/services/bigdata:sg_bigdata_stamp",
  ]

  external_deps = [
    "c_utils:utils",
    "device_manager:devicemanagersdk",
    "googletest:gmock",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hisysevent:libhisyseventmanager",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

group("unittest") {
  testonly = true
  deps = [ ":SecurityCollectorTest" ]
}
