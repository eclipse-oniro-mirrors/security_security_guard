# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/security/security_guard/security_guard.gni")
import("//build/test.gni")

ohos_unittest("SecurityGuardConfigManagerTest") {
  install_enable = true
  part_name = "security_guard"
  subsystem_name = "security"
  module_out_path = part_name + "/" + part_name

  resource_config_file = "resource/ohos_test.xml"

  include_dirs = [
    "include",
    "${sg_root_dir}/interfaces/inner_api/common/include",
    "${sg_root_dir}/frameworks/common/constants/include",
    "${sg_root_dir}/frameworks/common/json/include",
    "${sg_root_dir}/frameworks/common/task_handler/include",
    "${sg_root_dir}/frameworks/common/database/include",
    "${sg_root_dir}/frameworks/common/log/include",
    "${sg_root_dir}/frameworks/common/utils/include",
    "${sg_root_dir}/services/bigdata/include",
    "${sg_root_dir}/test/unittest/mock/data_collect",
    "${sg_root_dir}/test/unittest/mock/rdb",
    "${sg_root_dir}/interfaces/inner_api/classify/include",
  ]

  defines = []
  if (security_guard_enable_ext) {
    defines += [ "SECURITY_GUARD_ENABLE_EXT" ]
  }

  sources = [
    "${sg_root_dir}/frameworks/common/json/src/json_cfg.cpp",
    "${sg_root_dir}/frameworks/common/utils/src/security_guard_utils.cpp",
    "${sg_root_dir}/services/config_manager/src/base_config.cpp",
    "${sg_root_dir}/services/config_manager/src/config_data_manager.cpp",
    "${sg_root_dir}/services/config_manager/src/config_manager.cpp",
    "${sg_root_dir}/services/config_manager/src/config_operator.cpp",
    "${sg_root_dir}/services/config_manager/src/config_subscriber.cpp",
    "${sg_root_dir}/services/config_manager/src/event_config.cpp",
    "${sg_root_dir}/services/config_manager/src/model_cfg_marshalling.cpp",
    "${sg_root_dir}/services/config_manager/src/model_config.cpp",
    "src/security_guard_config_manager_test.cpp",
  ]

  deps = [
    "${sg_root_dir}/frameworks/common/classify:libsg_classify_sdk",
    "${sg_root_dir}/services/bigdata:sg_bigdata_stamp",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "googletest:gmock",
    "hilog:libhilog",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    blocklist = "${sg_root_dir}/cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
}

ohos_unittest("AppInfoDatabseTest") {
  install_enable = true
  part_name = "security_guard"
  subsystem_name = "security"
  module_out_path = part_name + "/" + part_name

  include_dirs = [
    "include",
    "${sg_root_dir}/frameworks/common/constants/include",
    "${sg_root_dir}/interfaces/inner_api/common/include",
    "${sg_root_dir}/interfaces/inner_api/classify/include",
    "${sg_root_dir}/frameworks/common/json/include",
    "${sg_root_dir}/frameworks/common/task_handler/include",
    "${sg_root_dir}/frameworks/common/database/include",
    "${sg_root_dir}/frameworks/common/log/include",
    "${sg_root_dir}/frameworks/common/utils/include",
    "${sg_root_dir}/services/bigdata/include",
    "${sg_root_dir}/services/config_manager/include",
    "${sg_root_dir}/test/unittest/mock/rdb",
    "${sg_root_dir}/test/unittest/data_collect/include",
  ]

  sources = [
    "${sg_root_dir}/services/data_collect/store/src/database.cpp",
    "${sg_root_dir}/services/data_collect/store/src/rdb_event_store_callback.cpp",
    "src/app_info_database_test.cpp",
  ]

  deps = [ "${sg_root_dir}/services/bigdata:sg_bigdata_stamp" ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "googletest:gmock",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    blocklist = "${sg_root_dir}/cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
}

group("unittest") {
  testonly = true
  deps = [
    ":AppInfoDatabseTest",
    ":SecurityGuardConfigManagerTest",
  ]
}
